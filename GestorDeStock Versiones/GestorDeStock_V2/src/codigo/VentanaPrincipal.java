 // Source code is unavailable, and was generated by the Fernflower decompiler.
package codigo;

import java.awt.Component;
import java.awt.GridLayout;
import java.util.Iterator;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class VentanaPrincipal extends JFrame {
   private SistemaGestor sistema;
   private JTable tablaProductos;
   private JTable tablaVentas;
   private DefaultTableModel modeloProductos;
   private DefaultTableModel modeloVentas;
   private static final String NOMBRE_ARCHIVO = "sistemaGestor.dat";

   public VentanaPrincipal() {
      this.setTitle("Sistema Gestor de Stock");
      this.setDefaultCloseOperation(3);
      this.setSize(800, 600);
      this.setLocationRelativeTo((Component)null);

      try {
         this.sistema = SistemaGestor.cargarEstado("sistemaGestor.dat");
      } catch (Exception var12) {
         this.sistema = new SistemaGestor();
      }

      String[] columnasProductos = new String[]{"ID", "Descripci\u00f3n", "Precio", "Stock"};
      this.modeloProductos = new DefaultTableModel(columnasProductos, 0);
      this.tablaProductos = new JTable(this.modeloProductos);
      this.actualizarTablaProductos();
      String[] columnasVentas = new String[]{"ID", "Productos", "Total", "Fecha"};
      this.modeloVentas = new DefaultTableModel(columnasVentas, 0);
      this.tablaVentas = new JTable(this.modeloVentas);
      this.actualizarTablaVentas();
      JPanel panelBotones = new JPanel();
      panelBotones.setLayout(new GridLayout(7, 1, 5, 5));
      JButton btnAñadirProducto = new JButton("A\u00f1adir Producto");
      btnAñadirProducto.addActionListener((e) -> {
         this.añadirProducto();
      });
      panelBotones.add(btnAñadirProducto);
      JButton btnEliminarProducto = new JButton("Eliminar Producto");
      btnEliminarProducto.addActionListener((e) -> {
         this.eliminarProducto();
      });
      panelBotones.add(btnEliminarProducto);
      JButton btnModificarStock = new JButton("Modificar Stock");
      btnModificarStock.addActionListener((e) -> {
         this.modificarStock();
      });
      panelBotones.add(btnModificarStock);
      JButton btnModificarPrecio = new JButton("Modificar Precio");
      btnModificarPrecio.addActionListener((e) -> {
         this.modificarPrecio();
      });
      panelBotones.add(btnModificarPrecio);
      JButton btnModificarTodosPrecios = new JButton("Modificar Todos los Precios");
      btnModificarTodosPrecios.addActionListener((e) -> {
         this.modificarTodosPrecios();
      });
      panelBotones.add(btnModificarTodosPrecios);
      JButton btnRegistrarVenta = new JButton("Registrar Venta");
      btnRegistrarVenta.addActionListener((e) -> {
         this.registrarVenta();
      });
      panelBotones.add(btnRegistrarVenta);
      JButton btnCerrarSistema = new JButton("Cerrar Sistema");
      btnCerrarSistema.addActionListener((e) -> {
         this.cerrarSistema();
      });
      panelBotones.add(btnCerrarSistema);
      JSplitPane splitPane = new JSplitPane(0, new JScrollPane(this.tablaProductos), new JScrollPane(this.tablaVentas));
      splitPane.setDividerLocation(300);
      this.add(splitPane, "Center");
      this.add(panelBotones, "East");
   }

   private void añadirProducto() {
      while(true) {
         try {
            while(true) {
               int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto:"));
               if (this.sistema.esIdRepetido(id)) {
                  int opcion = JOptionPane.showOptionDialog(this, "El ID ingresado ya existe. \u00bfDesea volver a intentar?", "ID Repetido", 0, 2, (Icon)null, new Object[]{"Volver a Intentar", "Cancelar"}, "Volver a Intentar");
                  if (opcion != 1) {
                     continue;
                  }

                  JOptionPane.showMessageDialog(this, "Operaci\u00f3n cancelada.");
                  return;
               }

               String descripcion = JOptionPane.showInputDialog(this, "Ingrese descripci\u00f3n del producto:");
               double precio = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese precio del producto:"));
               int stock = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese stock del producto:"));
               Producto producto = new Producto(id, descripcion, precio, stock);
               this.sistema.añadirProducto(producto);
               this.actualizarTablaProductos();
               return;
            }
         } catch (NumberFormatException var7) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores v\u00e1lidos.");
         }
      }
   }

   private void eliminarProducto() {
      int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto a eliminar:"));
      if (this.sistema.eliminarProducto(id)) {
         this.actualizarTablaProductos();
         JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "Producto no encontrado.");
      }

   }

   private void modificarStock() {
      int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto:"));
      int nuevoStock = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de stock nuevo:"));
      if (this.sistema.modificarStock(id, nuevoStock)) {
         this.actualizarTablaProductos();
         JOptionPane.showMessageDialog(this, "Stock modificado correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "Producto no encontrado.");
      }

   }

   private void modificarPrecio() {
      int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto:"));
      double nuevoPrecio = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese nuevo precio:"));
      if (this.sistema.modificarPrecio(id, nuevoPrecio)) {
         this.actualizarTablaProductos();
         JOptionPane.showMessageDialog(this, "Precio modificado correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "Producto no encontrado.");
      }

   }

   private void modificarTodosPrecios() {
      double porcentaje = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese porcentaje para modificar todos los precios (positivo para aumentar, negativo para decrementar):"));
      this.sistema.modificarTodosLosPrecios(porcentaje);
      this.actualizarTablaProductos();
      JOptionPane.showMessageDialog(this, "Todos los precios modificados correctamente.");
   }

   private void registrarVenta() {
      int idVenta = this.sistema.generarIdVenta();
      Venta venta = new Venta(idVenta);

      int var3;
      do {
         int idProducto = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto vendido:"));
         Producto producto = this.sistema.obtenerProductoPorId(idProducto);
         if (producto == null) {
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");
            return;
         }

         int cantidadVendida = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese cantidad vendida:"));
         if (cantidadVendida > producto.getStock()) {
            JOptionPane.showMessageDialog(this, "Stock insuficiente para el producto.");
            return;
         }

         venta.agregarProducto(producto, cantidadVendida);
         var3 = JOptionPane.showConfirmDialog(this, "\u00bfDesea a\u00f1adir otro producto a la venta?", "Continuar", 0);
      } while(var3 == 0);

      if (this.sistema.registrarVenta(venta)) {
         this.actualizarTablaProductos();
         this.actualizarTablaVentas();
         JOptionPane.showMessageDialog(this, "Venta registrada correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "No se pudo registrar la venta. Stock insuficiente.");
      }

   }

   private void cerrarSistema() {
      try {
         this.sistema.guardarEstado("sistemaGestor.dat");
         JOptionPane.showMessageDialog(this, "Sistema guardado exitosamente.", "Guardar Sistema", 1);
      } catch (Exception var2) {
         JOptionPane.showMessageDialog(this, "Error al guardar el sistema: " + var2.getMessage(), "Error", 0);
      }

      System.exit(0);
   }

   private void actualizarTablaProductos() {
      this.modeloProductos.setRowCount(0);
      Iterator var2 = this.sistema.getListaProductos().iterator();

      while(var2.hasNext()) {
         Producto producto = (Producto)var2.next();
         this.modeloProductos.addRow(new Object[]{producto.getId(), producto.getDescripcion(), producto.getPrecio(), producto.getStock()});
      }

   }

   private void actualizarTablaVentas() {
      this.modeloVentas.setRowCount(0);

      Venta venta;
      StringBuilder productosStr;
      for(Iterator var2 = this.sistema.getListaVentas().iterator(); var2.hasNext(); this.modeloVentas.addRow(new Object[]{venta.getId(), productosStr.toString(), venta.getTotal(), venta.getFecha()})) {
         venta = (Venta)var2.next();
         productosStr = new StringBuilder();
         Iterator var5 = venta.getProductos().iterator();

         while(var5.hasNext()) {
            Producto producto = (Producto)var5.next();
            productosStr.append(producto.getDescripcion()).append(" x").append(producto.getStock()).append(" x $").append(producto.getPrecio() * (double)producto.getStock()).append(", ");
         }

         if (productosStr.length() > 0) {
            productosStr.setLength(productosStr.length() - 2);
         }
      }

   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(() -> {
         VentanaPrincipal ventana = new VentanaPrincipal();
         ventana.setVisible(true);
      });
   }
}
