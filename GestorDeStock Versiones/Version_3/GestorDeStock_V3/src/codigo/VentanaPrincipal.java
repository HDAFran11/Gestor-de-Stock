 // Source code is unavailable, and was generated by the Fernflower decompiler.
package codigo;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class VentanaPrincipal extends JFrame {
   private SistemaGestor sistema;
   private JTable tablaProductos;
   private JTable tablaVentas;
   private DefaultTableModel modeloProductos;
   private DefaultTableModel modeloVentas;
   private static final String NOMBRE_ARCHIVO = "sistemaGestor.dat";

   public VentanaPrincipal() {
       this.setTitle("Sistema Gestor de Stock");
       this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.setSize(800, 600);
       this.setLocationRelativeTo(null);

       try {
           this.sistema = SistemaGestor.cargarEstado(NOMBRE_ARCHIVO);
       } catch (Exception e) {
           this.sistema = new SistemaGestor();
       }

       String[] columnasProductos = new String[]{"ID", "Descripción", "Precio", "Stock"};
       this.modeloProductos = new DefaultTableModel(columnasProductos, 0);
       this.tablaProductos = new JTable(this.modeloProductos);
       this.actualizarTablaProductos();

       String[] columnasVentas = new String[]{"ID", "Productos", "Total", "Fecha"};
       this.modeloVentas = new DefaultTableModel(columnasVentas, 0);
       this.tablaVentas = new JTable(this.modeloVentas);
       this.actualizarTablaVentas();

       // Crear paneles para cada pestaña
       JPanel panelProductos = new JPanel(new BorderLayout());
       JPanel panelBotonesProductos = new JPanel();
       panelBotonesProductos.setLayout(new GridLayout(7, 1, 5, 5));
       agregarBotonesProductos(panelBotonesProductos);
       panelProductos.add(new JScrollPane(this.tablaProductos), BorderLayout.CENTER);
       panelProductos.add(panelBotonesProductos, BorderLayout.EAST);

       JPanel panelVentas = new JPanel(new BorderLayout());
       JPanel panelBotonesVentas = new JPanel();
       panelBotonesVentas.setLayout(new GridLayout(8, 1, 5, 5));
       agregarBotonesVentas(panelBotonesVentas);
       panelVentas.add(new JScrollPane(this.tablaVentas), BorderLayout.CENTER);
       panelVentas.add(panelBotonesVentas, BorderLayout.EAST);

       // Crear las pestañas
       JTabbedPane pestañas = new JTabbedPane();
       pestañas.addTab("Productos", panelProductos);
       pestañas.addTab("Ventas", panelVentas);

       this.add(pestañas, BorderLayout.CENTER);
       this.add(createCerrarSistemaPanel(), BorderLayout.SOUTH);
   }

   private void agregarBotonesProductos(JPanel panel) {
       JButton btnAñadirProducto = new JButton("Añadir Producto");
       btnAñadirProducto.addActionListener(e -> añadirProducto());
       panel.add(btnAñadirProducto);

       JButton btnEliminarProducto = new JButton("Eliminar Producto");
       btnEliminarProducto.addActionListener(e -> eliminarProducto());
       panel.add(btnEliminarProducto);

       JButton btnModificarStock = new JButton("Modificar Stock");
       btnModificarStock.addActionListener(e -> modificarStock());
       panel.add(btnModificarStock);

       JButton btnModificarPrecio = new JButton("Modificar Precio");
       btnModificarPrecio.addActionListener(e -> modificarPrecio());
       panel.add(btnModificarPrecio);

       JButton btnModificarTodosPrecios = new JButton("Modificar Todos los Precios");
       btnModificarTodosPrecios.addActionListener(e -> modificarTodosPrecios());
       panel.add(btnModificarTodosPrecios);
   }

   private void agregarBotonesVentas(JPanel panel) {
       JButton btnRegistrarVenta = new JButton("Registrar Venta");
       btnRegistrarVenta.addActionListener(e -> registrarVenta());
       panel.add(btnRegistrarVenta);

       JButton btnInformeDia = new JButton("Informe del Día");
       btnInformeDia.addActionListener(e -> generarInformeDelDia());
       panel.add(btnInformeDia);
   }

   private JPanel createCerrarSistemaPanel() {
       JPanel panel = new JPanel();
       JButton btnCerrarSistema = new JButton("Cerrar Sistema");
       btnCerrarSistema.addActionListener(e -> cerrarSistema());
       panel.add(btnCerrarSistema);
       return panel;
   }

   private void añadirProducto() {
	    try {
	        int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto:"));
	        if (this.sistema.esIdRepetido(id)) {
	            int opcion = JOptionPane.showOptionDialog(this, "El ID ingresado ya existe. ¿Desea volver a intentar?", "ID Repetido", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, new Object[]{"Volver a Intentar", "Cancelar"}, "Volver a Intentar");
	            if (opcion == JOptionPane.NO_OPTION) {
	                JOptionPane.showMessageDialog(this, "Operación cancelada.");
	                return;
	            }
	        }

	        String descripcion = JOptionPane.showInputDialog(this, "Ingrese descripción del producto:");
	        double precio = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese precio del producto:"));
	        int stock = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese stock del producto:"));
	        Producto producto = new Producto(id, descripcion, precio, stock);
	        this.sistema.añadirProducto(producto);
	        this.actualizarTablaProductos();
	        JOptionPane.showMessageDialog(this, "Producto añadido correctamente.");
	    } catch (NumberFormatException e) {
	        JOptionPane.showMessageDialog(this, "Por favor, ingrese valores válidos.");
	    }
	}


   private void eliminarProducto() {
      int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto a eliminar:"));
      if (this.sistema.eliminarProducto(id)) {
         this.actualizarTablaProductos();
         JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "Producto no encontrado.");
      }

   }

   private void modificarStock() {
      int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto:"));
      int nuevoStock = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de stock nuevo:"));
      if (this.sistema.modificarStock(id, nuevoStock)) {
         this.actualizarTablaProductos();
         JOptionPane.showMessageDialog(this, "Stock modificado correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "Producto no encontrado.");
      }

   }

   private void modificarPrecio() {
      int id = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto:"));
      double nuevoPrecio = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese nuevo precio:"));
      if (this.sistema.modificarPrecio(id, nuevoPrecio)) {
         this.actualizarTablaProductos();
         JOptionPane.showMessageDialog(this, "Precio modificado correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "Producto no encontrado.");
      }

   }

   private void modificarTodosPrecios() {
      double porcentaje = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese porcentaje para modificar todos los precios (positivo para aumentar, negativo para decrementar):"));
      this.sistema.modificarTodosLosPrecios(porcentaje);
      this.actualizarTablaProductos();
      JOptionPane.showMessageDialog(this, "Todos los precios modificados correctamente.");
   }

   private void registrarVenta() {
      int idVenta = this.sistema.generarIdVenta();
      Venta venta = new Venta(idVenta);

      int var3;
      do {
         int idProducto = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese ID del producto vendido:"));
         Producto producto = this.sistema.obtenerProductoPorId(idProducto);
         if (producto == null) {
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");
            return;
         }

         int cantidadVendida = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese cantidad vendida:"));
         if (cantidadVendida > producto.getStock()) {
            JOptionPane.showMessageDialog(this, "Stock insuficiente para el producto.");
            return;
         }

         venta.agregarProducto(producto, cantidadVendida);
         var3 = JOptionPane.showConfirmDialog(this, "\u00bfDesea a\u00f1adir otro producto a la venta?", "Continuar", 0);
      } while(var3 == 0);

      if (this.sistema.registrarVenta(venta)) {
         this.actualizarTablaProductos();
         this.actualizarTablaVentas();
         JOptionPane.showMessageDialog(this, "Venta registrada correctamente.");
      } else {
         JOptionPane.showMessageDialog(this, "No se pudo registrar la venta. Stock insuficiente.");
      }

   }
   
   private void generarInformeDelDia() {
       SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
       String fechaHoy = sdf.format(new Date());
       StringBuilder informe = new StringBuilder();
       double totalDia = 0;

       informe.append("Fecha ").append(fechaHoy).append("\n\n");

       for (Venta venta : this.sistema.getListaVentas()) {
           informe.append("Venta N° ").append(venta.getId()).append(":\n");
           double totalVenta = 0;

           for (Producto producto : venta.getProductos()) {
               double subtotal = producto.getPrecio() * producto.getStock();
               informe.append(producto.getDescripcion())
                       .append(" x").append(producto.getStock())
                       .append(" x $").append(producto.getPrecio())
                       .append(" = $").append(subtotal).append("\n");
               totalVenta += subtotal;
           }

           informe.append("Total                                            = $").append(totalVenta).append("\n\n");
           totalDia += totalVenta;
       }

       informe.append("Total del Día                                = $").append(totalDia);

       // Mostrar el informe en un diálogo
       JTextArea textArea = new JTextArea(informe.toString());
       textArea.setEditable(false);
       JScrollPane scrollPane = new JScrollPane(textArea);
       JOptionPane.showMessageDialog(this, scrollPane, "Informe del Día", JOptionPane.INFORMATION_MESSAGE);

       // Guardar el informe en un archivo
       try (BufferedWriter writer = new BufferedWriter(new FileWriter("informeDelDia.txt"))) {
           writer.write(informe.toString());
       } catch (IOException e) {
           JOptionPane.showMessageDialog(this, "Error al guardar el informe: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
       }
   }

   private void cerrarSistema() {
       try {
           this.sistema.guardarEstado(NOMBRE_ARCHIVO);
           JOptionPane.showMessageDialog(this, "Sistema guardado exitosamente.", "Guardar Sistema", JOptionPane.INFORMATION_MESSAGE);
       } catch (Exception e) {
           JOptionPane.showMessageDialog(this, "Error al guardar el sistema: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
       }
       System.exit(0);
   }

   private void actualizarTablaProductos() {
       this.modeloProductos.setRowCount(0);
       Iterator<Producto> it = this.sistema.getListaProductos().iterator();
       while (it.hasNext()) {
           Producto producto = it.next();
           this.modeloProductos.addRow(new Object[]{producto.getId(), producto.getDescripcion(), producto.getPrecio(), producto.getStock()});
       }
   }

   private void actualizarTablaVentas() {
       this.modeloVentas.setRowCount(0);
       Iterator<Venta> it = this.sistema.getListaVentas().iterator();
       while (it.hasNext()) {
           Venta venta = it.next();
           StringBuilder productosStr = new StringBuilder();
           Iterator<Producto> prodIt = venta.getProductos().iterator();
           while (prodIt.hasNext()) {
               Producto producto = prodIt.next();
               productosStr.append(producto.getDescripcion()).append(" x").append(producto.getStock()).append(" x $").append(producto.getPrecio() * (double)producto.getStock()).append(", ");
           }
           if (productosStr.length() > 0) {
               productosStr.setLength(productosStr.length() - 2);
           }
           this.modeloVentas.addRow(new Object[]{venta.getId(), productosStr.toString(), venta.getTotal(), venta.getFecha()});
       }
   }

   public static void main(String[] args) {
       SwingUtilities.invokeLater(() -> {
           VentanaPrincipal ventana = new VentanaPrincipal();
           ventana.setVisible(true);
       });
   }
}
